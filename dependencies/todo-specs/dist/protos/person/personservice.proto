// Code generated by furo spectools. DO NOT EDIT.

syntax = "proto3";
package person;
option go_package = "github.com/theNorstroem/todo-specs/dist/pb/person;personpb";
option java_multiple_files = true;
option java_outer_classname = "PersonserviceProto";
option java_package = "com.furo.baseperson";

import "furo/signatures/signatures.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "person/person.proto";
import "person/reqmsgs.proto";


// People / persons are important to us, they should do the work for us.
// 
service Persons {

  // Use this to create new persons.
  rpc CreatePerson (CreatePersonRequest) returns (furo.signatures.EmptyEntity){
	//Create: POST /persons person.Person , furo.signatures.EmptyEntity #Use this to create new persons.
	option (google.api.http) = {
		post: "/persons"
		body: "body"
	};
  }

  // We use this to disable a person in the list, we do not delete them.
  rpc DeletePerson (DeletePersonRequest) returns (google.protobuf.Empty){
	//Delete: DELETE /persons/{pn} google.protobuf.Empty , google.protobuf.Empty #We use this to disable a person in the list, we do not delete them.
	option (google.api.http) = {
		delete: "/persons/{pn}"
		
	};
  }

  // Fireing some persons can increase the performance of the other persons POST. Do not use this to much.
  rpc FirePerson (FirePersonRequest) returns (google.protobuf.Empty){
	//Fire: POST /persons/{pn}:ferment google.protobuf.Empty , google.protobuf.Empty #Fireing some persons can increase the performance of the other persons POST. Do not use this to much.
	option (google.api.http) = {
		post: "/persons/{pn}:ferment"
		body: "body"
	};
  }

  // Returns a single person.
  rpc GetPerson (GetPersonRequest) returns (person.PersonEntity){
	//Get: GET /persons/{pn} google.protobuf.Empty , person.PersonEntity #Returns a single person.
	option (google.api.http) = {
		get: "/persons/{pn}"
		
	};
  }

  // List persons with pagination.
  rpc ListPersons (ListPersonsRequest) returns (person.PersonCollection){
	//List: GET /persons google.protobuf.Empty , person.PersonCollection #List persons with pagination.
	option (google.api.http) = {
		get: "/persons"
		
	};
  }

  // Use this to update existing persons. PATCH is also supported
  rpc UpdatePerson (UpdatePersonRequest) returns (person.PersonEntity){
	//Update: PUT /persons/{pn} person.Person , person.PersonEntity #Use this to update existing persons. PATCH is also supported
	option (google.api.http) = {
		put: "/persons/{pn}"
		body: "body"
		additional_bindings {
            patch: "/persons/{pn}"
            body: "body"
        }
	};
  }

}


